"""
This type stub file was generated by pyright.
"""

__all__ = ['CacheHandler', 'CacheFileHandler', 'DjangoSessionCacheHandler', 'FlaskSessionCacheHandler', 'MemoryCacheHandler', 'RedisCacheHandler', 'MemcacheCacheHandler']
logger = ...
class CacheHandler:
    """
    An abstraction layer for handling the caching and retrieval of
    authorization tokens.

    Custom extensions of this class must implement get_cached_token
    and save_token_to_cache methods with the same input and output
    structure as the CacheHandler class.
    """
    def get_cached_token(self):
        """
        Get and return a token_info dictionary object.
        """
        ...
    
    def save_token_to_cache(self, token_info):
        """
        Save a token_info dictionary object to the cache and return None.
        """
        ...
    


class CacheFileHandler(CacheHandler):
    """
    Handles reading and writing cached Spotify authorization tokens
    as json files on disk.
    """
    def __init__(self, cache_path=..., username=..., encoder_cls=...) -> None:
        """
        Parameters:
             * cache_path: May be supplied, will otherwise be generated
                           (takes precedence over `username`)
             * username: May be supplied or set as environment variable
                         (will set `cache_path` to `.cache-{username}`)
             * encoder_cls: May be supplied as a means of overwriting the
                        default serializer used for writing tokens to disk
        """
        ...
    
    def get_cached_token(self): # -> Any | None:
        ...
    
    def save_token_to_cache(self, token_info): # -> None:
        ...
    


class MemoryCacheHandler(CacheHandler):
    """
    A cache handler that simply stores the token info in memory as an
    instance attribute of this class. The token info will be lost when this
    instance is freed.
    """
    def __init__(self, token_info=...) -> None:
        """
        Parameters:
            * token_info: The token info to store in memory. Can be None.
        """
        ...
    
    def get_cached_token(self): # -> None:
        ...
    
    def save_token_to_cache(self, token_info): # -> None:
        ...
    


class DjangoSessionCacheHandler(CacheHandler):
    """
    A cache handler that stores the token info in the session framework
    provided by Django.

    Read more at https://docs.djangoproject.com/en/3.2/topics/http/sessions/
    """
    def __init__(self, request) -> None:
        """
        Parameters:
            * request: HttpRequest object provided by Django for every
            incoming request
        """
        ...
    
    def get_cached_token(self): # -> None:
        ...
    
    def save_token_to_cache(self, token_info): # -> None:
        ...
    


class FlaskSessionCacheHandler(CacheHandler):
    """
    A cache handler that stores the token info in the session framework
    provided by flask.
    """
    def __init__(self, session) -> None:
        ...
    
    def get_cached_token(self): # -> None:
        ...
    
    def save_token_to_cache(self, token_info): # -> None:
        ...
    


class RedisCacheHandler(CacheHandler):
    """
    A cache handler that stores the token info in the Redis.
    """
    def __init__(self, redis, key=...) -> None:
        """
        Parameters:
            * redis: Redis object provided by redis-py library
            (https://github.com/redis/redis-py)
            * key: May be supplied, will otherwise be generated
                   (takes precedence over `token_info`)
        """
        ...
    
    def get_cached_token(self): # -> Any | None:
        ...
    
    def save_token_to_cache(self, token_info): # -> None:
        ...
    


class MemcacheCacheHandler(CacheHandler):
    """A Cache handler that stores the token info in Memcache using the pymemcache client
    """
    def __init__(self, memcache, key=...) -> None:
        """
        Parameters:
            * memcache: memcache client object provided by pymemcache
            (https://pymemcache.readthedocs.io/en/latest/getting_started.html)
            * key: May be supplied, will otherwise be generated
                   (takes precedence over `token_info`)
        """
        ...
    
    def get_cached_token(self): # -> Any | None:
        ...
    
    def save_token_to_cache(self, token_info): # -> None:
        ...
    


